{
  "tools": [
    {
      "name": "browser_preview",
      "description": "Spin up a browser preview for a web server. This allows the USER to interact with the web server normally as well as provide console logs and other information from the web server to Cascade.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "A short name 3-5 word name for the target web server"
          },
          "Url": {
            "type": "string",
            "description": "The URL of the target web server to provide a browser preview for"
          }
        },
        "required": ["Url", "Name"]
      }
    },
    {
      "name": "codebase_search",
      "description": "Find snippets of code from the codebase most relevant to the search query. This performs best when the search query is more precise and relating to the function or purpose of code.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Query": { "type": "string", "description": "Search query" },
          "TargetDirectories": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of absolute paths to directories to search over"
          }
        },
        "required": ["Query", "TargetDirectories"]
      }
    },
    {
      "name": "command_status",
      "description": "Get the status of a previously executed terminal command by its ID. Returns the current status (running, done), output lines as specified by output priority, and any error if present.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "CommandId": {
            "type": "string",
            "description": "ID of the command to get status for"
          },
          "OutputCharacterCount": {
            "type": "integer",
            "description": "Number of characters to view"
          },
          "WaitDurationSeconds": {
            "type": "integer",
            "description": "Number of seconds to wait for command completion before getting the status"
          }
        },
        "required": ["CommandId", "OutputCharacterCount", "WaitDurationSeconds"]
      }
    },
    {
      "name": "create_memory",
      "description": "Save important context relevant to the USER and their task to a memory database.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "enum": ["create", "update", "delete"],
            "description": "The type of action to take on the MEMORY"
          },
          "Content": {
            "type": "string",
            "description": "Content of a new or updated MEMORY"
          },
          "CorpusNames": {
            "type": "array",
            "items": { "type": "string" },
            "description": "CorpusNames of the workspaces associated with the MEMORY"
          },
          "Id": {
            "type": "string",
            "description": "Id of an existing MEMORY to update or delete"
          },
          "Tags": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Tags to associate with the MEMORY"
          },
          "Title": {
            "type": "string",
            "description": "Descriptive title for a new or updated MEMORY"
          },
          "UserTriggered": {
            "type": "boolean",
            "description": "Set to true if the user explicitly asked you to create/modify this memory"
          }
        },
        "required": [
          "Id",
          "Title",
          "Content",
          "CorpusNames",
          "Tags",
          "Action",
          "UserTriggered"
        ]
      }
    },
    {
      "name": "edit_file",
      "description": "Use this tool to edit an existing file. Follow these rules: 1. Specify ONLY the precise lines of code that you wish to edit. 2. NEVER specify or write out unchanged code. Instead, represent all unchanged code using this special placeholder: {{ ... }}.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "TargetFile": {
            "type": "string",
            "description": "The target file to modify"
          },
          "CodeEdit": {
            "type": "string",
            "description": "Specify ONLY the precise lines of code that you wish to edit"
          },
          "CodeMarkdownLanguage": {
            "type": "string",
            "description": "Markdown language for the code block"
          },
          "Instruction": {
            "type": "string",
            "description": "A description of the changes that you are making to the file"
          },
          "TargetLintErrorIds": {
            "type": "array",
            "items": { "type": "string" },
            "description": "If applicable, IDs of lint errors this edit aims to fix"
          }
        },
        "required": [
          "TargetFile",
          "CodeMarkdownLanguage",
          "Instruction",
          "CodeEdit"
        ]
      }
    },
    {
      "name": "find_by_name",
      "description": "Search for files and subdirectories within a specified directory using fd. Search uses smart case and will ignore gitignored files by default.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "SearchDirectory": {
            "type": "string",
            "description": "The directory to search within"
          },
          "Pattern": {
            "type": "string",
            "description": "Optional, Pattern to search for, supports glob format"
          },
          "Excludes": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Optional, exclude files/directories that match the given glob patterns"
          },
          "Type": {
            "type": "string",
            "description": "Optional, type filter, enum=file,directory,any"
          },
          "MaxDepth": {
            "type": "integer",
            "description": "Optional, maximum depth to search"
          },
          "Extensions": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Optional, file extensions to include"
          },
          "FullPath": {
            "type": "boolean",
            "description": "Optional, whether the full absolute path must match the glob pattern"
          }
        },
        "required": [
          "SearchDirectory",
          "Pattern",
          "Excludes",
          "Type",
          "MaxDepth",
          "Extensions",
          "FullPath"
        ]
      }
    },
    {
      "name": "grep_search",
      "description": "Use ripgrep to find exact pattern matches within files or directories. Results are returned in JSON format and for each match you will receive the filename, line number, line content, node path, context type, and matching snippet.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "SearchPath": {
            "type": "string",
            "description": "The path to search"
          },
          "Query": {
            "type": "string",
            "description": "The search term or pattern to look for within files"
          },
          "MatchPerLine": {
            "type": "boolean",
            "description": "If true, returns each line that matches the query"
          },
          "Includes": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The files or directories to search within"
          },
          "CaseInsensitive": {
            "type": "boolean",
            "description": "If true, performs a case-insensitive search"
          },
          "IsRegex": {
            "type": "boolean",
            "description": "If true, treats Query as a regular expression pattern"
          }
        },
        "required": [
          "SearchPath",
          "Query",
          "MatchPerLine",
          "Includes",
          "CaseInsensitive",
          "IsRegex"
        ]
      }
    },
    {
      "name": "list_dir",
      "description": "List the contents of a directory. Directory path must be an absolute path to a directory that exists.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "DirectoryPath": {
            "type": "string",
            "description": "Path to list contents of, should be absolute path to a directory"
          }
        },
        "required": ["DirectoryPath"]
      }
    },
    {
      "name": "list_resources",
      "description": "Lists the available resources from an MCP server. The server may paginate results and this tool will return a pagination cursor if more results exist.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of the server to list available resources from"
          },
          "Cursor": {
            "type": "string",
            "description": "Opaque string used for pagination"
          }
        },
        "required": ["ServerName", "Cursor"]
      }
    },
    {
      "name": "open_browser_url",
      "description": "Open a URL in Windsurf Browser to view the page contents of a URL in a rendered format.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "The URL to open in the user's browser"
          }
        },
        "required": ["Url"]
      }
    },
    {
      "name": "read_resource",
      "description": "Retrieves a specified resource's contents.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of the server to read the resource from"
          },
          "Uri": {
            "type": "string",
            "description": "Unique identifier for the resource"
          }
        },
        "required": ["ServerName", "Uri"]
      }
    },
    {
      "name": "read_url_content",
      "description": "Read content from a URL. URL must be an HTTP or HTTPS URL that points to a valid internet resource accessible via web browser.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Url": { "type": "string", "description": "URL to read content from" }
        },
        "required": ["Url"]
      }
    },
    {
      "name": "run_command",
      "description": "PROPOSE a command to run on behalf of the user. Operating System: mac. Shell: zsh. NEVER PROPOSE A cd COMMAND.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "CommandLine": {
            "type": "string",
            "description": "The exact command line string to execute"
          },
          "Blocking": {
            "type": "boolean",
            "description": "If true, the command will block until it is entirely finished"
          },
          "Cwd": {
            "type": "string",
            "description": "The current working directory for the command"
          },
          "SafeToAutoRun": {
            "type": "boolean",
            "description": "Set to true if you believe that this command is safe to run WITHOUT user approval"
          },
          "WaitMsBeforeAsync": {
            "type": "integer",
            "description": "Only applicable if Blocking is false. Specifies milliseconds to wait after starting command before sending it to be fully async"
          }
        },
        "required": ["CommandLine"]
      }
    },
    {
      "name": "search_in_file",
      "description": "Returns code snippets in the specified file that are most relevant to the search query. Shows entire code for top items, but only a docstring and signature for others.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Query": { "type": "string", "description": "Search query" },
          "AbsolutePath": {
            "type": "string",
            "description": "Absolute path to the file to search in"
          }
        },
        "required": ["Query", "AbsolutePath"]
      }
    },
    {
      "name": "search_web",
      "description": "Performs a web search to get a list of relevant web documents for the given query and optional domain filter.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": { "type": "string" },
          "domain": {
            "type": "string",
            "description": "Optional domain to recommend the search prioritize"
          }
        },
        "required": ["query", "domain"]
      }
    },
    {
      "name": "suggested_responses",
      "description": "If you are calling no other tools and are asking a question to the user, use this tool to supply a small number of possible suggested answers to your question.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Suggestions": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of suggestions. Each should be at most a couple words, do not return more than 3 options"
          }
        },
        "required": ["Suggestions"]
      }
    },
    {
      "name": "view_code_item",
      "description": "View the content of up to 5 code item nodes in a file, each as a class or a function. You must use fully qualified code item names.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "File": {
            "type": "string",
            "description": "Absolute path to the node to edit"
          },
          "NodePaths": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Path of the nodes within the file"
          }
        },
        "required": ["NodePaths"]
      }
    },
    {
      "name": "view_content_chunk",
      "description": "View a specific chunk of document content using its DocumentId and chunk position. The DocumentId must have already been read by the read_url_content or read_knowledge_base_item tool before this can be used on that particular DocumentId.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "document_id": {
            "type": "string",
            "description": "The ID of the document that the chunk belongs to"
          },
          "position": {
            "type": "integer",
            "description": "The position of the chunk to view"
          }
        },
        "required": ["document_id", "position"]
      }
    },
    {
      "name": "view_file_outline",
      "description": "View the outline of the input file. This is the preferred first-step tool for file exploration. The outline will contain a breakdown of functions and classes in the file.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "AbsolutePath": {
            "type": "string",
            "description": "Path to file to view. Must be an absolute path"
          },
          "ItemOffset": {
            "type": "integer",
            "description": "Offset of items to show. This is used for pagination"
          }
        },
        "required": ["AbsolutePath", "ItemOffset"]
      }
    },
    {
      "name": "view_line_range",
      "description": "View the contents of a file. The lines of the file are 1-indexed, and the output of this tool call will be the file contents from StartLine to EndLine (inclusive).",
      "inputSchema": {
        "type": "object",
        "properties": {
          "AbsolutePath": {
            "type": "string",
            "description": "Path to file to view. Must be an absolute path"
          },
          "StartLine": {
            "type": "integer",
            "description": "Startline to view, 1-indexed as usual"
          },
          "EndLine": {
            "type": "integer",
            "description": "Endline to view, 1-indexed as usual, inclusive"
          }
        },
        "required": ["AbsolutePath", "StartLine", "EndLine"]
      }
    },
    {
      "name": "write_to_file",
      "description": "Use this tool to create new files. The file and any parent directories will be created for you if they do not already exist. NEVER use this tool to modify or overwrite existing files.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "TargetFile": {
            "type": "string",
            "description": "The target file to create and write code to"
          },
          "CodeContent": {
            "type": "string",
            "description": "The code contents to write to the file"
          },
          "EmptyFile": {
            "type": "boolean",
            "description": "Set this to true to create an empty file"
          }
        },
        "required": ["TargetFile", "CodeContent", "EmptyFile"]
      }
    }
  ]
}
